generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @db.VarChar(255)
  email    String  @unique @db.VarChar(255)
  password String
  admin    Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Relacionamento com clientes pessoa física e pessoa jurídica
  individualClient IndividualClient?
  corporateClient  CorporateClient?
  media            Media[]
}

model ContactForm {
  id          Int    @id @default(autoincrement())
  name        String
  email       String
  phoneNumber String
  subject     String
  message     String

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model IndividualClient {
  id             Int      @id @default(autoincrement())
  cpf            String   @unique @db.VarChar(14)
  dateOfBirth    DateTime
  address        String
  phoneNumber    String
  contractNumber String   @unique @db.VarChar(20) // Novo campo para número de contrato

  // Relacionamento com o usuário associado
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  technicalSupport TechnicalSupportTicket[]

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Índices para melhorar a consulta
  @@index([userId], name: "idx_userId_IndividualClient")
}

model CorporateClient {
  id                Int    @id @default(autoincrement())
  cnpj              String @unique @db.VarChar(18)
  stateRegistration String
  address           String
  phoneNumber       String
  contractNumber    String @unique @db.VarChar(20) // Novo campo para número de contrato

  // Relacionamento com o usuário associado
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  technicalSupport TechnicalSupportTicket[]

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Índices para melhorar a consulta
  @@index([userId], name: "idx_userId_CorporateClient")
}

model VisitSchedule {
  id           Int      @id @default(autoincrement())
  name         String
  date         DateTime
  time         String
  street       String
  number       String
  neighborhood String
  city         String
  landmark     String
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model TechnicalSupportTicket {
  id             Int      @id @default(autoincrement())
  contractNumber String   @db.VarChar(20)
  name           String
  phoneNumber    String
  reason         String
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Adiciona uma relação para o cliente individual
  contractNumberIndivClient String?           @unique
  individualClient          IndividualClient? @relation(fields: [contractNumberIndivClient], references: [contractNumber])

  // Adiciona uma relação para o cliente corporativo
  contractNumberCorpClient String?          @unique
  corporateClient          CorporateClient? @relation(fields: [contractNumberCorpClient], references: [contractNumber])
}

model Media {
  id        Int      @id @default(autoincrement())
  fileType  String // Pode ser 'photo', 'video', ou outros tipos de mídia
  fileName  String // Nome do arquivo
  filePath  String // Caminho do arquivo (ou URL se estiver hospedado em outro lugar)
  ownerId   Int // ID do usuário proprietário da mídia
  owner     User     @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}
